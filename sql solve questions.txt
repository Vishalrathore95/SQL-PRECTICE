
SQL Practice Solutions
This document contains SQL queries that address various scenarios related to a healthcare database. The queries cover a range of operations including selections, updates, joins, aggregations, and more. Below are the questions and their corresponding solutions.

Questions and Solutions
1. Show first name, last name, and gender of patients whose gender is 'M'
sql

SELECT first_name, last_name, gender 
FROM patients
WHERE gender LIKE 'M';
2. Show first name and last name of patients who do not have allergies (null)
sql

SELECT first_name, last_name 
FROM patients
WHERE allergies IS NULL;
3. Show first name of patients that start with the letter 'C'
sql

SELECT first_name 
FROM patients
WHERE first_name LIKE 'C%';
4. Show first name and last name of patients that weigh within the range of 100 to 120 (inclusive)
sql

SELECT first_name, last_name 
FROM patients
WHERE weight BETWEEN 100 AND 120;
5. Update the patients table for the allergies column. If the patient's allergies are null then replace it with 'NKA'
sql

UPDATE patients
SET allergies = 'NKA'
WHERE allergies IS NULL;
6. Show first name and last name concatenated into one column to show their full name
sql

SELECT CONCAT(first_name, " ", last_name) AS full_name 
FROM patients;
7. Show first name, last name, and the full province name of each patient


SELECT patients.first_name, patients.last_name, province_names.province_name
FROM patients 
JOIN province_names ON province_names.province_id = patients.province_id;
8. Show how many patients have a birth_date with 2010 as the birth year

SELECT COUNT(*) AS num_patients_2010_birth_year
FROM patients
WHERE YEAR(birth_date) = 2010;
9. Show the first name, last name, and height of the patient with the greatest height

SELECT first_name, last_name, height 
FROM patients
ORDER BY height DESC
LIMIT 1;
10. Show all columns for patients who have one of the following patient_ids: 1, 45, 534, 879, 1000

SELECT * 
FROM patients 
WHERE patient_id IN (1, 45, 534, 879, 1000);
11. Show the total number of admissions

SELECT COUNT(admission_date) AS total_admissions 
FROM admissions;
12. Show all the columns from admissions where the patient was admitted and discharged on the same day

SELECT * 
FROM admissions
WHERE admission_date = discharge_date;
13. Show the patient id and the total number of admissions for patient_id 579

SELECT patient_id, COUNT(admission_date) AS total_admissions 
FROM admissions
WHERE patient_id = 579;
14. Show unique cities that are in province_id 'NS'

SELECT DISTINCT city 
FROM patients
WHERE province_id = 'NS';
15. Find the first name, last name, and birth date of patients who have a height greater than 160 and weight greater than 70

SELECT first_name, last_name, birth_date 
FROM patients
WHERE height > 160 AND weight > 70;
16. List patients' first name, last name, and allergies where allergies are not null and they are from the city of 'Hamilton'

SELECT first_name, last_name, allergies 
FROM patients
WHERE allergies IS NOT NULL AND city = 'Hamilton';
17. Show all patients' first name, last name, and birth_date who were born in the 1970s decade. Sort the list starting from the earliest birth_date

SELECT first_name, last_name, birth_date 
FROM patients
WHERE YEAR(birth_date) BETWEEN 1970 AND 1979
ORDER BY birth_date ASC;
18. Show unique first names from the patients table which only occur once

SELECT first_name
FROM patients
GROUP BY first_name
HAVING COUNT(*) = 1;
19. Show patient_id and first_name from patients where their first_name starts and ends with 's' and is at least 6 characters long

SELECT patient_id, first_name 
FROM patients
WHERE first_name LIKE 's%____s';
20. Show patient_id, first_name, and last_name from patients whose diagnosis is 'Dementia'

SELECT patients.patient_id, patients.first_name, patients.last_name 
FROM patients
JOIN admissions ON patients.patient_id = admissions.patient_id
WHERE admissions.diagnosis = 'Dementia';
21. Display every patient's first_name ordered by the length of each name and then alphabetically

SELECT first_name 
FROM patients
ORDER BY LENGTH(first_name), first_name;
22. Show the total number of male and female patients in the patients table

SELECT 
    COUNT(CASE WHEN gender = 'M' THEN 1 END) AS male_count,
    COUNT(CASE WHEN gender = 'F' THEN 1 END) AS female_count
FROM patients;
23. Show first and last name, allergies from patients who have allergies to either 'Penicillin' or 'Morphine'. Show results ordered ascending by allergies then by first name then by last name

SELECT first_name, last_name, allergies 
FROM patients
WHERE allergies IN ('Penicillin', 'Morphine')
ORDER BY allergies ASC, first_name ASC, last_name ASC;
24. Show patient_id and diagnosis from admissions for patients admitted multiple times for the same diagnosis

SELECT patient_id, diagnosis 
FROM admissions
GROUP BY patient_id, diagnosis
HAVING COUNT(*) > 1;
25. Show the city and the total number of patients in the city. Order from most to least patients and then by city name ascending

SELECT city, COUNT(DISTINCT patient_id) AS num_patients 
FROM patients
GROUP BY city
ORDER BY num_patients DESC, city ASC;
26. Show first name, last name, and role of every person that is either a patient or doctor

SELECT first_name, last_name, 'Patient' AS role 
FROM patients
UNION ALL
SELECT first_name, last_name, 'Doctor' AS role 
FROM doctors;
27. Show all allergies ordered by popularity. Remove NULL values from the query

SELECT allergies, COUNT(*) AS total_diagnosis 
FROM patients
WHERE allergies IS NOT NULL
GROUP BY allergies
ORDER BY total_diagnosis DESC;
28. Show patient's full name in a specific format, sorted by first_name in descending order

SELECT CONCAT(UPPER(last_name), ',', LOWER(first_name)) AS new_name_format 
FROM patients
ORDER BY first_name DESC;
29. Show the province_id(s) and sum of height where the total sum of its patient's height is greater than or equal to 7,000

SELECT province_id, SUM(height) AS sum_height 
FROM patients
GROUP BY province_id
HAVING SUM(height) >= 7000
ORDER BY sum_height ASC;
30. Show the difference between the largest and smallest weight for patients with the last name 'Maroni'

SELECT MAX(weight) - MIN(weight) AS weight_delta 
FROM patients
WHERE last_name = 'Maroni';
31. Show the days of the month (1-31) and how many admission_dates occurred on that day. Sort by the day with most admissions to least admissions

SELECT DAY(admission_date) AS day_number, COUNT(*) AS num_of_admissions 
FROM admissions
GROUP BY DAY(admission_date)
ORDER BY num_of_admissions DESC, day_number DESC;
32. Show all columns for patient_id 542's most recent admission_date

SELECT * 
FROM admissions
WHERE patient_id = 542
ORDER BY admission_date DESC
LIMIT 1;
33. Show patient_id, attending_doctor_id, and diagnosis for admissions matching specific criteria

SELECT patient_id, attending_doctor_id, diagnosis 
FROM admissions 
WHERE 
    (patient_id % 2 != 0 AND attending_doctor_id IN (1, 5, 19)) OR 
    (attending_doctor_id LIKE '%2%' AND LENGTH(patient_id) = 3)
ORDER BY attending_doctor_id;
34. Show first name, last name, and the total number of admissions attended for each doctor

SELECT doctors.first_name, doctors.last_name, COUNT(admissions.admission_date) AS total_admissions 
FROM doctors
JOIN admissions ON doctors.doctor_id = admissions.attending_doctor_id
GROUP BY doctors.first_name, doctors.last_name;
35. For each doctor, display their id, full name, and the first and last admission date they attended

SELECT doctors.doctor_id, 
       CONCAT(doctors.first_name, ' ', doctors.last_name) AS full_name,
       MIN(admissions.admission_date) AS first_admission,
       MAX(admissions.admission_date) AS last_admission 
FROM doctors
JOIN admissions ON doctors.doctor_id = admissions.attending_doctor_id
GROUP BY doctors.doctor_id, full_name;
36. List the ids and full names of all doctors who have never attended an admission

SELECT doctor_id, CONCAT(first_name, ' ', last_name) AS full_name 
FROM doctors 
WHERE doctor_id NOT IN (SELECT DISTINCT attending_doctor_id FROM admissions);
37. Show all columns of patients who were admitted more than once

SELECT * 
FROM patients 
WHERE patient_id IN (SELECT patient_id FROM admissions GROUP BY patient_id HAVING COUNT(*) > 1);
38. Show all columns from doctors who have the specialty of 'Cardiology'

SELECT * 
FROM doctors 
WHERE specialty = 'Cardiology';
39. Show first name, last name, diagnosis, and the total number of admissions for each unique combination

SELECT patients.first_name, patients.last_name, admissions.diagnosis, COUNT(*) AS total_admissions 
FROM patients
JOIN admissions ON patients.patient_id = admissions.patient_id
GROUP BY patients.first_name, patients.last_name, admissions.diagnosis;
40. Show first name, last name, birth date, gender of patients born in 1990 and sort by last name in descending order

SELECT first_name, last_name, birth_date, gender 
FROM patients
WHERE YEAR(birth_date) = 1990
ORDER BY last_name DESC;
41. Show the full name of patients along with their admission diagnosis and their doctor's full name

SELECT CONCAT(patients.first_name, ' ', patients.last_name) AS patient_name,
       admissions.diagnosis,
       CONCAT(doctors.first_name, ' ', doctors.last_name) AS doctor_name
FROM admissions
JOIN patients ON patients.patient_id = admissions.patient_id
JOIN doctors ON admissions.attending_doctor_id = doctors.doctor_id;
42. Display first name, last name, and number of duplicate patients based on their first name and last name

SELECT first_name, last_name, COUNT(*) AS num_of_duplicate 
FROM patients
GROUP BY first_name, last_name
HAVING COUNT(*) > 1;
43. Display patient's full name, height in feet (rounded to 1 decimal), weight in pounds (rounded to 0 decimals), birth_date, and gender non-abbreviated

SELECT 
    CONCAT(first_name, ' ', last_name) AS 'Full Name',
    ROUND(height / 30.48, 1) AS 'Height',
    ROUND(weight * 2.205, 0) AS 'Weight',
    birth_date,
    CASE
        WHEN gender = 'M' THEN 'male'
        WHEN gender = 'F' THEN 'female'
    END AS gender
FROM patients;
44. Show patient_id, first_name, last_name from patients who do not have any records in the admissions table

SELECT patient_id, first_name, last_name 
FROM patients
WHERE patient_id NOT IN (SELECT patient_id FROM admissions);
45. Show all patients grouped into weight groups and total amount of patients in each weight group

SELECT FLOOR(patients.weight / 10) * 10 AS weight_group, COUNT(*) AS patients_in_group
FROM patients
GROUP BY FLOOR(patients.weight / 10)
ORDER BY FLOOR(patients.weight / 10) DESC;
46. Show patient_id, weight, height, isObese from patients table

SELECT 
    patient_id,
    weight,
    height,
    CASE WHEN (weight / POWER(height / 100.0, 2)) >= 30 THEN 1 ELSE 0 END AS isObese
FROM patients;
47. Show patient_id, first_name, last_name, and attending doctor's specialty for patients diagnosed with 'Epilepsy' by a doctor named 'Lisa'

SELECT patients.patient_id, patients.first_name, patients.last_name, doctors.specialty
FROM patients
JOIN admissions ON patients.patient_id = admissions.patient_id
JOIN doctors ON admissions.attending_doctor_id = doctors.doctor_id
WHERE diagnosis = 'Epilepsy' AND doctors.first_name LIKE '%Lisa%';
48. Show patient_id and temp_password for patients who have gone through admissions

SELECT
  patients.patient_id,
  CONCAT(
    patients.patient_id,
    LEN(patients.last_name),
    YEAR(birth_date)
  ) AS temp_password
FROM patients 
JOIN admissions ON patients.patient_id = admissions.patient_id
GROUP BY patients.patient_id;
49. Show total admission cost for each insurance group

SELECT
  'Yes' AS has_insurance,
  COUNT(*) * 10 AS cost_after_insurance
FROM admissions
WHERE patient_id % 2 = 0
UNION
SELECT
  'No' AS has_insurance,
  COUNT(*) * 50 AS cost_after_insurance
FROM admissions
WHERE patient_id % 2 != 0;
50. Show provinces with more male patients than female patients

SELECT 
    province_names.province_name
FROM 
    patients
JOIN 
    province_names 
ON 
    patients.province_id = province_names.province_id
GROUP BY 
    province_names.province_name
HAVING 
    COUNT(CASE WHEN patients.gender = 'M' THEN 1 END) > COUNT(CASE WHEN patients.gender = 'F' THEN 1 END);
51. Pull all columns for a specific patient matching given criteria

SELECT *
FROM patients
WHERE first_name LIKE '__r%'
  AND gender = 'F'
  AND MONTH(birth_date) IN (2, 5, 12)
  AND weight BETWEEN 60 AND 80
  AND MOD(patient_id, 2) != 0
  AND city = 'Kingston';
52. Show the percentage of patients with 'M' as their gender

SELECT
  CONCAT(ROUND(100 * AVG(gender = 'M'), 2), '%') AS percent_of_male_patients
FROM patients;
53. Display total admissions per day and the change from the previous date

SELECT 
    admission_date, 
    COUNT(admission_date) AS admission_count,
    COUNT(admission_date) - LAG(COUNT(admission_date), 1) OVER (ORDER BY admission_date) AS change_from_previous_day
FROM admissions 
GROUP BY admission_date 
ORDER BY admission_date ASC;
54. Sort province names with 'Ontario' always on top

SELECT province_name 
FROM province_names
ORDER BY
    CASE WHEN province_name = 'Ontario' THEN 0 ELSE 1 END,
    province_name;
55. Breakdown of total admissions each doctor has started each year

SELECT
  d.doctor_id AS doctor_id,
  CONCAT(d.first_name, ' ', d.last_name) AS doctor_name,
  d.specialty,
  YEAR(a.admission_date) AS selected_year,
  COUNT(*) AS total_admissions
FROM doctors AS d
LEFT JOIN admissions AS a ON d.doctor_id = a.attending_doctor_id
GROUP BY doctor_id, doctor_name, d.specialty, selected_year
ORDER BY doctor_id, selected_year;
